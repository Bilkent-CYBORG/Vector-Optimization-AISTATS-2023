{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Imports\n",
    "\n",
    "%matplotlib inline\n",
    "import matplotlib\n",
    "matplotlib.rcParams['text.usetex'] = True\n",
    "matplotlib.rcParams.update({'font.size': 14})\n",
    "import matplotlib.pyplot as plt\n",
    "plt.style.use('seaborn-whitegrid')\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import cvxpy as cp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load data\n",
    "\n",
    "datafile = 'sort_256.csv'\n",
    "designs = np.genfromtxt(datafile, delimiter=';')\n",
    "mu = np.copy(designs[:,3:])\n",
    "mu[:,0] = -mu[:,0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Helper functions\n",
    "\n",
    "def get_bigmij(vi, vj, W):\n",
    "    \"\"\"\n",
    "    Compute M(i,j) for designs i and j \n",
    "    :param vi, vj: (D,1) ndarrays\n",
    "    :param W: (n_constraint,D) ndarray\n",
    "    :return: M(i,j).\n",
    "    \"\"\"\n",
    "    D = W.shape[1]\n",
    "    P = 2*np.eye(D)\n",
    "    q = (-2*(vj-vi)).ravel()\n",
    "    G = -W\n",
    "    h = -np.array([np.max([0,np.dot(W[0,:],vj-vi)[0]]),\n",
    "                np.max([0,np.dot(W[1,:],vj-vi)[0]])])\n",
    "\n",
    "    # Define and solve the CVXPY problem.\n",
    "    x = cp.Variable(D)\n",
    "    prob = cp.Problem(cp.Minimize((1/2)*cp.quad_form(x, P) + q.T @ x),\n",
    "                 [G @ x <= h])\n",
    "    #A @ x == b    \n",
    "    prob.solve()\n",
    "    bigmij = np.sqrt(prob.value + np.dot((vj-vi).T, vj-vi)).ravel()\n",
    "\n",
    "    # Print result.\n",
    "    #print(\"\\nThe optimal value is\", prob.value)\n",
    "    #print(\"A solution x is\")\n",
    "    #print(x.value)\n",
    "    #print(\"A dual solution corresponding to the inequality constraints is\")\n",
    "    #print(prob.constraints[0].dual_value)\n",
    "    #print(\"M(i,j) is\", bigmij)\n",
    "    return bigmij\n",
    "\n",
    "\n",
    "def get_alpha(rind, W):\n",
    "    \"\"\"\n",
    "    Compute alpha_rind for row rind of W \n",
    "    :param rind: row index\n",
    "    :param W: (n_constraint,D) ndarray\n",
    "    :return: alpha_rind.\n",
    "    \"\"\"\n",
    "    m = W.shape[0]+1 #number of constraints\n",
    "    D = W.shape[1]\n",
    "    f = -W[rind,:]\n",
    "    A = []\n",
    "    b = []\n",
    "    c = []\n",
    "    d = []\n",
    "    for i in range(W.shape[0]):\n",
    "        A.append(np.zeros((1, D)))\n",
    "        b.append(np.zeros(1))\n",
    "        c.append(W[i,:])\n",
    "        d.append(np.zeros(1))\n",
    "    \n",
    "    A.append(np.eye(D))\n",
    "    b.append(np.zeros(D))\n",
    "    c.append(np.zeros(D))\n",
    "    d.append(np.ones(1))\n",
    "\n",
    "    # Define and solve the CVXPY problem.\n",
    "    x = cp.Variable(D)\n",
    "    # We use cp.SOC(t, x) to create the SOC constraint ||x||_2 <= t.\n",
    "    soc_constraints = [\n",
    "          cp.SOC(c[i].T @ x + d[i], A[i] @ x + b[i]) for i in range(m)\n",
    "    ]\n",
    "    prob = cp.Problem(cp.Minimize(f.T@x),\n",
    "                  soc_constraints)\n",
    "    prob.solve()\n",
    "\n",
    "    \"\"\"\n",
    "    # Print result.\n",
    "    print(\"The optimal value is\", -prob.value)\n",
    "    print(\"A solution x is\")\n",
    "    print(x.value)\n",
    "    for i in range(m):\n",
    "        print(\"SOC constraint %i dual variable solution\" % i)\n",
    "        print(soc_constraints[i].dual_value)\n",
    "    \"\"\"    \n",
    "        \n",
    "    return -prob.value   \n",
    "\n",
    "\n",
    "def get_alpha_vec(W):\n",
    "    \"\"\"\n",
    "    Compute alpha_vec for W \n",
    "    :param W: an (n_constraint,D) ndarray\n",
    "    :return: alpha_vec, an (n_constraint,1) ndarray\n",
    "    \"\"\"    \n",
    "    alpha_vec = np.zeros((W.shape[0],1))\n",
    "    for i in range(W.shape[0]):\n",
    "        alpha_vec[i] = get_alpha(i, W)\n",
    "    return alpha_vec\n",
    "\n",
    "\n",
    "def get_smallmij(vi, vj, W, alpha_vec):\n",
    "    \"\"\"\n",
    "    Compute m(i,j) for designs i and j \n",
    "    :param vi, vj: (D,1) ndarrays\n",
    "    :param W: (n_constraint,D) ndarray\n",
    "    :param alpha_vec: (n_constraint,1) ndarray of alphas of W\n",
    "    :return: m(i,j).\n",
    "    \"\"\"    \n",
    "    prod = np.matmul(W, vj - vi)\n",
    "    prod[prod<0] = 0\n",
    "    smallmij = (prod/alpha_vec).min()\n",
    "    \n",
    "    return smallmij  \n",
    "\n",
    "\n",
    "def is_covered_SOCP(vi, vj, eps, W):\n",
    "    \"\"\"\n",
    "    Check if vi is eps covered by vj for cone matrix W \n",
    "    :param vi, vj: (D,1) ndarrays\n",
    "    :param W: An (n_constraint,D) ndarray\n",
    "    :param eps: float\n",
    "    :return: Boolean.\n",
    "    \"\"\"    \n",
    "    m = 2*W.shape[0]+1 # number of constraints\n",
    "    D = W.shape[1]\n",
    "    f = np.zeros(D)\n",
    "    A = []\n",
    "    b = []\n",
    "    c = []\n",
    "    d = []\n",
    "\n",
    "    for i in range(W.shape[0]):\n",
    "        A.append(np.zeros((1, D)))\n",
    "        b.append(np.zeros(1))\n",
    "        c.append(W[i,:])\n",
    "        d.append(np.zeros(1))\n",
    "    \n",
    "    A.append(np.eye(D))\n",
    "    b.append((vi-vj).ravel())\n",
    "    c.append(np.zeros(D))\n",
    "    d.append(eps*np.ones(1))\n",
    "\n",
    "    for i in range(W.shape[0]):\n",
    "        A.append(np.zeros((1, D)))\n",
    "        b.append(np.zeros(1))\n",
    "        c.append(W[i,:])\n",
    "        d.append(np.dot(W[i,:],(vi-vj)))\n",
    "        \n",
    "    # Define and solve the CVXPY problem.\n",
    "    x = cp.Variable(D)\n",
    "    # We use cp.SOC(t, x) to create the SOC constraint ||x||_2 <= t.\n",
    "    soc_constraints = [\n",
    "          cp.SOC(c[i].T @ x + d[i], A[i] @ x + b[i]) for i in range(m)\n",
    "    ]\n",
    "    prob = cp.Problem(cp.Minimize(f.T@x),\n",
    "                  soc_constraints)\n",
    "    prob.solve()\n",
    "\n",
    "    \"\"\"\n",
    "    # Print result.\n",
    "    print(\"The optimal value is\", prob.value)\n",
    "    print(\"A solution x is\")\n",
    "    print(x.value)\n",
    "    print(x.value is not None)\n",
    "    for i in range(m):\n",
    "        print(\"SOC constraint %i dual variable solution\" % i)\n",
    "        print(soc_constraints[i].dual_value)\n",
    "    \"\"\"     \n",
    "    return x.value is not None\n",
    "\n",
    "\n",
    "def is_covered(vi, vj, eps, W):\n",
    "    \"\"\"\n",
    "    Check if vi is eps covered by vj for cone matrix W \n",
    "    :param vi, vj: (D,1) ndarrays\n",
    "    :param W: An (n_constraint,D) ndarray\n",
    "    :param eps: float\n",
    "    :return: Boolean.\n",
    "    \"\"\"  \n",
    "    if np.dot((vi-vj).T, vi-vj) <= eps**2:\n",
    "        return True\n",
    "    return is_covered_SOCP(vi, vj, eps, W)\n",
    "\n",
    "    \n",
    "def get_pareto_set(mu, W, alpha_vec, return_mask = False):\n",
    "    \"\"\"\n",
    "    Find the indices of Pareto designs (rows of mu)\n",
    "    :param mu: An (n_points, D) array\n",
    "    :param W: (n_constraint,D) ndarray\n",
    "    :param alpha_vec: (n_constraint,1) ndarray of alphas of W\n",
    "    :param return_mask: True to return a mask\n",
    "    :return: An array of indices of pareto-efficient points.\n",
    "        If return_mask is True, this will be an (n_points, ) boolean array\n",
    "        Otherwise it will be a (n_efficient_points, ) integer array of indices.\n",
    "    \"\"\"\n",
    "    is_efficient = np.arange(mu.shape[0])\n",
    "    n_points = mu.shape[0]\n",
    "    next_point_index = 0  # Next index in the is_efficient array to search for\n",
    "    while next_point_index<len(mu):\n",
    "        nondominated_point_mask = np.zeros(mu.shape[0], dtype=bool)\n",
    "        vj = mu[next_point_index].reshape(-1,1)\n",
    "        for i in range(len(mu)):\n",
    "            vi = mu[i].reshape(-1,1)\n",
    "            nondominated_point_mask[i] =  (get_smallmij(vi, vj, W, alpha_vec) == 0) and (get_bigmij(vi, vj, W) > 0)\n",
    "        nondominated_point_mask[next_point_index] = True\n",
    "        is_efficient = is_efficient[nondominated_point_mask]  # Remove dominated points\n",
    "        mu = mu[nondominated_point_mask]\n",
    "        next_point_index = np.sum(nondominated_point_mask[:next_point_index])+1\n",
    "    if return_mask:\n",
    "        is_efficient_mask = np.zeros(n_points, dtype = bool)\n",
    "        is_efficient_mask[is_efficient] = True\n",
    "        return is_efficient_mask\n",
    "    else:\n",
    "        return is_efficient \n",
    "\n",
    "    \n",
    "def get_delta(mu, W, alpha_vec):\n",
    "    \"\"\"\n",
    "    Computes Delta^*_i for each i in [n.points]\n",
    "    :param mu: An (n_points, D) array\n",
    "    :param W: (n_constraint,D) ndarray\n",
    "    :param alpha_vec: (n_constraint,1) ndarray of alphas of W\n",
    "    :return: An (n_points, D) array of Delta^*_i for each i in [n.points]\n",
    "    \"\"\"\n",
    "    n = mu.shape[0]\n",
    "    Delta = np.zeros(n)\n",
    "    for i in range(n):\n",
    "        for j in range(n):\n",
    "            vi = mu[i,:].reshape(-1,1)\n",
    "            vj = mu[j,:].reshape(-1,1)\n",
    "            mij = get_smallmij(vi, vj, W, alpha_vec)\n",
    "            if mij>Delta[i]:\n",
    "                Delta[i] = mij\n",
    "    \n",
    "    return Delta.reshape(-1,1)\n",
    "\n",
    "\n",
    "def get_uncovered_set(p_opt_miss, p_opt_hat, mu, eps, W):\n",
    "    \"\"\"\n",
    "    Check if vi is eps covered by vj for cone matrix W \n",
    "    :param p_opt_hat: ndarray of indices of designs in returned Pareto set\n",
    "    :param p_opt_miss: ndarray of indices of Pareto optimal points not in p_opt_hat\n",
    "    :mu: An (n_points,D) mean reward matrix\n",
    "    :param eps: float\n",
    "    :param W: An (n_constraint,D) ndarray\n",
    "    :return: ndarray of indices of points in p_opt_miss that are not epsilon covered\n",
    "    \"\"\"  \n",
    "    uncovered_set = []\n",
    "    \n",
    "    for i in p_opt_miss:\n",
    "        uncovered = True\n",
    "        for j in p_opt_hat:\n",
    "            if is_covered(mu[i,:].reshape(-1,1), mu[j,:].reshape(-1,1), eps, W):\n",
    "                uncovered = False\n",
    "        \n",
    "        if uncovered:\n",
    "            uncovered_set.append(i)\n",
    "        \n",
    "    return np.array(uncovered_set)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[  2   3   4   5   6   7   8  10  11  12  14  18  27  28  29  30  32  33\n",
      "  34  35  36  37  38  39  40  42  43  44  45  46  49  50  59  61  63  64\n",
      "  66  67  80  81  96 112 128 153 154 155 160 161 162 167 168 174 187]\n",
      "[  2   3   4   5   6   7   8  10  11  12  14  28  29  30  32  38  40  42\n",
      "  43  45  63 160 161 167 168 174]\n",
      "[  2   4   6   7   8  10  12  14 160 167]\n"
     ]
    }
   ],
   "source": [
    "# Generate matrix of inequalities for C_45, C_90, C_135\n",
    "# Obtain indices of designs in true Pareto sets P*_45, P*_90, P*_135\n",
    "\n",
    "theta_45 = np.pi/4\n",
    "W_45_1 = np.array([-np.tan(np.pi/4-theta_45/2), 1])\n",
    "W_45_2 = np.array([+np.tan(np.pi/4+theta_45/2), -1])\n",
    "W_45_1 = W_45_1/np.linalg.norm(W_45_1)\n",
    "W_45_2 = W_45_2/np.linalg.norm(W_45_2)\n",
    "W_45 = np.vstack((W_45_1, W_45_2))\n",
    "\n",
    "W_90 = np.eye(2)\n",
    "\n",
    "theta_135 = 3*np.pi/4\n",
    "W_135_1 = np.array([-np.tan(np.pi/4-theta_135/2), 1])\n",
    "W_135_2 = np.array([-np.tan(np.pi/4+theta_135/2), 1])\n",
    "W_135_1 = W_135_1/np.linalg.norm(W_135_1)\n",
    "W_135_2 = W_135_2/np.linalg.norm(W_135_2)\n",
    "W_135 = np.vstack((W_135_1, W_135_2))\n",
    "\n",
    "alpha_vec_45 = get_alpha_vec(W_45)\n",
    "alpha_vec_90 = get_alpha_vec(W_90)\n",
    "alpha_vec_135 = get_alpha_vec(W_135)\n",
    "\n",
    "p_opt_45 = get_pareto_set(mu, W_45, alpha_vec_45)\n",
    "p_opt_90 = get_pareto_set(mu, W_90, alpha_vec_90)\n",
    "p_opt_135 = get_pareto_set(mu, W_135, alpha_vec_135)\n",
    "\n",
    "# Print indices of designs in true Pareto sets P*_45, P*_90, P*_135\n",
    "\n",
    "print(p_opt_45)\n",
    "print(p_opt_90)\n",
    "print(p_opt_135)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p_opt_135 subset p_opt_90 subset p_opt_45\n",
      "Out of 206 designs 53 appears in C(pi/4), 26 appears in C(pi/2), 10 appears in C(3pi/4)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 1. Sanity check. For theta1 > theta2, P*_theta1 should be a subset of P*_theta2\n",
    "# 2. Print number of designs appearing in each Pareto set\n",
    "# 3. Plot Pareto front for C_45, C_90, C_135\n",
    "\n",
    "if np.setdiff1d(p_opt_135,p_opt_90).size == 0 and np.setdiff1d(p_opt_90,p_opt_45).size == 0:\n",
    "    print(\"p_opt_135 subset p_opt_90 subset p_opt_45\")\n",
    "else:\n",
    "    print(\"ERROR. p_opt_135 subset p_opt_90 subset p_opt_45 DOES NOT HOLD\") \n",
    "\n",
    "p_opt_45_unique = np.setdiff1d(p_opt_45,p_opt_90)\n",
    "p_opt_90_unique = np.setdiff1d(p_opt_90,p_opt_135)\n",
    "\n",
    "print(\"Out of {} designs {} appears in C(pi/4), {} appears in C(pi/2), {} appears in C(3pi/4)\".format(mu.shape[0], p_opt_45.shape[0], p_opt_90.shape[0], p_opt_135.shape[0]))\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(5, 5))\n",
    "\n",
    "ax.scatter(mu[np.delete(np.arange(mu.shape[0]), p_opt_45),0], mu[np.delete(np.arange(mu.shape[0]), p_opt_45) ,1], c='gray', alpha=0.5)\n",
    "ax.scatter(mu[p_opt_135,0], mu[p_opt_135,1], c='tab:green',label=r'$i \\in P^*_{3\\pi/4}$', alpha=0.5)\n",
    "ax.scatter(mu[p_opt_90_unique,0], mu[p_opt_90_unique ,1], c='tab:blue', label=r'$i \\in  P^*_{\\pi/2} \\setminus P^*_{3\\pi/4}$', alpha=0.5)\n",
    "ax.scatter(mu[p_opt_45_unique,0], mu[p_opt_45_unique ,1], c='tab:orange', label=r'$i \\in P^*_{\\pi/4} \\setminus P^*_{\\pi/2}$', alpha=0.5)\n",
    "\n",
    "ax.set_xlabel(r'$\\mu^1$')\n",
    "ax.set_ylabel(r'$\\mu^2$')\n",
    "ax.set_xlim(-18,-5)\n",
    "ax.set_ylim(2,15)\n",
    "ax.legend()\n",
    "plt.savefig('paretosets.pdf')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Compute Delta^*_i\n",
    "\n",
    "Delta_45 = get_delta(mu, W_45, alpha_vec_45)\n",
    "Delta_90 = get_delta(mu, W_90, alpha_vec_90)\n",
    "Delta_135 = get_delta(mu, W_135, alpha_vec_135)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mu_1</th>\n",
       "      <th>mu_2</th>\n",
       "      <th>Delta_45</th>\n",
       "      <th>Delta_90</th>\n",
       "      <th>Delta_135</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>206.000000</td>\n",
       "      <td>206.000000</td>\n",
       "      <td>153.000000</td>\n",
       "      <td>180.000000</td>\n",
       "      <td>196.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>-12.136967</td>\n",
       "      <td>9.424007</td>\n",
       "      <td>0.666476</td>\n",
       "      <td>0.905822</td>\n",
       "      <td>1.342783</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>2.066398</td>\n",
       "      <td>2.155770</td>\n",
       "      <td>0.520270</td>\n",
       "      <td>0.710753</td>\n",
       "      <td>0.869483</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>-16.248817</td>\n",
       "      <td>2.858161</td>\n",
       "      <td>0.001360</td>\n",
       "      <td>0.003777</td>\n",
       "      <td>0.018363</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>-13.756088</td>\n",
       "      <td>7.743677</td>\n",
       "      <td>0.264716</td>\n",
       "      <td>0.292774</td>\n",
       "      <td>0.751456</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>-11.979960</td>\n",
       "      <td>9.691435</td>\n",
       "      <td>0.599548</td>\n",
       "      <td>0.831458</td>\n",
       "      <td>1.216701</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>-10.470902</td>\n",
       "      <td>10.911977</td>\n",
       "      <td>0.974929</td>\n",
       "      <td>1.306122</td>\n",
       "      <td>1.845063</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>-7.087463</td>\n",
       "      <td>14.716642</td>\n",
       "      <td>2.576346</td>\n",
       "      <td>3.543719</td>\n",
       "      <td>4.726188</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             mu_1        mu_2    Delta_45    Delta_90   Delta_135\n",
       "count  206.000000  206.000000  153.000000  180.000000  196.000000\n",
       "mean   -12.136967    9.424007    0.666476    0.905822    1.342783\n",
       "std      2.066398    2.155770    0.520270    0.710753    0.869483\n",
       "min    -16.248817    2.858161    0.001360    0.003777    0.018363\n",
       "25%    -13.756088    7.743677    0.264716    0.292774    0.751456\n",
       "50%    -11.979960    9.691435    0.599548    0.831458    1.216701\n",
       "75%    -10.470902   10.911977    0.974929    1.306122    1.845063\n",
       "max     -7.087463   14.716642    2.576346    3.543719    4.726188"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Descriptive statistics of Pareto suboptimal designs\n",
    "\n",
    "mu_describe = pd.DataFrame(np.hstack((mu, Delta_45, Delta_90, Delta_135)), columns = ['mu_1', 'mu_2', 'Delta_45', 'Delta_90', 'Delta_135'])\n",
    "mu_describe.mask(mu_describe == 0).describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Simulation parameters\n",
    "sigma = 1\n",
    "delta = 0.01\n",
    "K = mu.shape[0]\n",
    "c = 1 + np.sqrt(2)\n",
    "D = 2\n",
    "eps = np.array([0.001, 0.01, 0.1])\n",
    "\n",
    "# Theoretical value of number of samples per arm (for theta = pi/2)\n",
    "l = np.ceil( 4*((c*sigma/eps)**2)*np.log(4*D/(2*delta/(K*(K-1)))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Simulation model\n",
    "\n",
    "seed = 12345\n",
    "np.random.seed(seed) \n",
    "\n",
    "eval_num = np.array([100, 1000, 10000, 100000])\n",
    "nrun = 100\n",
    "nsample = eval_num.shape[0]\n",
    "noisemat = sigma * np.random.randn(nrun,nsample,K,D)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Compute epsilon independent results\n",
    "\n",
    "noisemat_interval = noisemat * np.sqrt(np.hstack((eval_num[0],np.diff(eval_num))))[np.newaxis,:,np.newaxis,np.newaxis]\n",
    "noisemat_avg = np.cumsum(noisemat_interval,axis=1)/eval_num[np.newaxis,:,np.newaxis,np.newaxis]\n",
    "\n",
    "mu_hat = mu[np.newaxis,np.newaxis,:,:] + noisemat_avg\n",
    "\n",
    "# p_optmiss: number of i in P* but notin P\n",
    "# p_subopt_45_cnt: number of i in P such that Delta*_i > epsilon\n",
    "\n",
    "p_optmiss_45_cnt = np.zeros((nrun, eval_num.shape[0]))\n",
    "p_subopt_45_cnt = np.zeros((nrun, eval_num.shape[0]))\n",
    "\n",
    "p_optmiss_90_cnt = np.zeros((nrun, eval_num.shape[0]))\n",
    "p_subopt_90_cnt = np.zeros((nrun, eval_num.shape[0]))\n",
    "\n",
    "p_optmiss_135_cnt = np.zeros((nrun, eval_num.shape[0]))\n",
    "p_subopt_135_cnt = np.zeros((nrun, eval_num.shape[0]))\n",
    "\n",
    "P_dict = {}\n",
    "\n",
    "for i in range(nrun):\n",
    "    for j in range(eval_num.shape[0]):\n",
    "        p_opt_45_hat = get_pareto_set(mu_hat[i,j,:,:], W_45, alpha_vec_45)\n",
    "        p_opt_90_hat = get_pareto_set(mu_hat[i,j,:,:], W_90, alpha_vec_90)\n",
    "        p_opt_135_hat = get_pareto_set(mu_hat[i,j,:,:], W_135, alpha_vec_135)\n",
    "        \n",
    "        p_subopt_45_cnt[i,j] = np.setdiff1d(p_opt_45_hat, p_opt_45).shape[0]\n",
    "        p_subopt_90_cnt[i,j] = np.setdiff1d(p_opt_90_hat, p_opt_90).shape[0]\n",
    "        p_subopt_135_cnt[i,j] = np.setdiff1d(p_opt_135_hat, p_opt_135).shape[0]\n",
    "        \n",
    "        p_optmiss_45_cnt[i,j] = np.setdiff1d(p_opt_45, p_opt_45_hat).shape[0]\n",
    "        p_optmiss_90_cnt[i,j] = np.setdiff1d(p_opt_90, p_opt_90_hat).shape[0]\n",
    "        p_optmiss_135_cnt[i,j] = np.setdiff1d(p_opt_135, p_opt_135_hat).shape[0]\n",
    "        \n",
    "        P_dict[(i,j,45)] = p_opt_45_hat\n",
    "        P_dict[(i,j,90)] = p_opt_90_hat\n",
    "        P_dict[(i,j,135)] = p_opt_135_hat\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.savez('results_final_r100.npz', \n",
    "         P_dict = P_dict, \n",
    "         p_subopt_45_cnt = p_subopt_45_cnt, \n",
    "         p_subopt_90_cnt = p_subopt_90_cnt, \n",
    "         p_subopt_135_cnt = p_subopt_135_cnt, \n",
    "         p_optmiss_45_cnt = p_optmiss_45_cnt,\n",
    "         p_optmiss_90_cnt = p_optmiss_90_cnt,\n",
    "         p_optmiss_135_cnt = p_optmiss_135_cnt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Compute the number of times designs in P satisfy success condition\n",
    "\n",
    "# Number of Pareto optimal points that fail condition 1\n",
    "fail1_45_cnt = np.zeros((nrun, eval_num.shape[0], eps.shape[0])) \n",
    "fail1_90_cnt = np.zeros((nrun, eval_num.shape[0], eps.shape[0]))\n",
    "fail1_135_cnt = np.zeros((nrun, eval_num.shape[0], eps.shape[0]))\n",
    "\n",
    "# Number of returned suboptimal points that fail condition 2\n",
    "fail2_45_cnt = np.zeros((nrun, eval_num.shape[0], eps.shape[0])) \n",
    "fail2_90_cnt = np.zeros((nrun, eval_num.shape[0], eps.shape[0]))\n",
    "fail2_135_cnt = np.zeros((nrun, eval_num.shape[0], eps.shape[0]))\n",
    "\n",
    "for i in range(nrun):\n",
    "    for j in range(eval_num.shape[0]):\n",
    "        \n",
    "        p_opt_45_hat = P_dict[(i,j,45)]\n",
    "        p_opt_90_hat = P_dict[(i,j,90)]\n",
    "        p_opt_135_hat = P_dict[(i,j,135)]\n",
    "        \n",
    "        fail2_45_cnt[i,j,:] = np.count_nonzero(Delta_45[p_opt_45_hat] > eps, axis=0)\n",
    "        fail2_90_cnt[i,j,:] = np.count_nonzero(Delta_90[p_opt_90_hat] > eps, axis=0)\n",
    "        fail2_135_cnt[i,j,:] = np.count_nonzero(Delta_135[p_opt_135_hat] > eps, axis=0)\n",
    "        \n",
    "        p_optmiss_45 = np.setdiff1d(p_opt_45, p_opt_45_hat)\n",
    "        p_optmiss_90 = np.setdiff1d(p_opt_90, p_opt_90_hat)\n",
    "        p_optmiss_135 = np.setdiff1d(p_opt_135, p_opt_135_hat)\n",
    "        \n",
    "        for k in range(eps.shape[0]):\n",
    "    \n",
    "            fail1_points_45 = get_uncovered_set(p_optmiss_45, p_opt_45_hat, mu, eps[k], W_45)\n",
    "            fail1_points_90 = get_uncovered_set(p_optmiss_90, p_opt_90_hat, mu, eps[k], W_90)\n",
    "            fail1_points_135 = get_uncovered_set(p_optmiss_135, p_opt_135_hat, mu, eps[k], W_135)\n",
    "            \n",
    "            fail1_45_cnt[i,j,k] = fail1_points_45.shape[0]\n",
    "            fail1_90_cnt[i,j,k] = fail1_points_90.shape[0]\n",
    "            fail1_135_cnt[i,j,k] = fail1_points_135.shape[0]\n",
    "            \n",
    "success_rate_45 = np.average(((fail1_45_cnt == 0) & (fail2_45_cnt == 0)).astype(int), axis=0)\n",
    "success_rate_90 = np.average(((fail1_90_cnt == 0) & (fail2_90_cnt == 0)).astype(int), axis=0)\n",
    "success_rate_135 = np.average(((fail1_135_cnt == 0) & (fail2_135_cnt == 0)).astype(int), axis=0)            \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>SR 45</th>\n",
       "      <th>SR 90</th>\n",
       "      <th>SR 135</th>\n",
       "      <th>NF1 45</th>\n",
       "      <th>NF1 90</th>\n",
       "      <th>NF1 135</th>\n",
       "      <th>NF2 45</th>\n",
       "      <th>NF2 90</th>\n",
       "      <th>NF2 135</th>\n",
       "      <th>PM 45</th>\n",
       "      <th>PM 90</th>\n",
       "      <th>PM 135</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"3\" valign=\"top\">100</th>\n",
       "      <th>0.001</th>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>12.440</td>\n",
       "      <td>7.610</td>\n",
       "      <td>1.830</td>\n",
       "      <td>9.260</td>\n",
       "      <td>7.070</td>\n",
       "      <td>2.520</td>\n",
       "      <td>0.248</td>\n",
       "      <td>0.293</td>\n",
       "      <td>0.183</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.010</th>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>11.520</td>\n",
       "      <td>6.870</td>\n",
       "      <td>1.830</td>\n",
       "      <td>7.440</td>\n",
       "      <td>6.080</td>\n",
       "      <td>2.520</td>\n",
       "      <td>0.248</td>\n",
       "      <td>0.293</td>\n",
       "      <td>0.183</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.100</th>\n",
       "      <td>1.000</td>\n",
       "      <td>7.000</td>\n",
       "      <td>27.000</td>\n",
       "      <td>4.220</td>\n",
       "      <td>1.210</td>\n",
       "      <td>0.630</td>\n",
       "      <td>1.270</td>\n",
       "      <td>0.980</td>\n",
       "      <td>0.830</td>\n",
       "      <td>0.248</td>\n",
       "      <td>0.293</td>\n",
       "      <td>0.183</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"3\" valign=\"top\">1000</th>\n",
       "      <th>0.001</th>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>29.000</td>\n",
       "      <td>4.450</td>\n",
       "      <td>3.330</td>\n",
       "      <td>0.320</td>\n",
       "      <td>5.780</td>\n",
       "      <td>3.720</td>\n",
       "      <td>0.890</td>\n",
       "      <td>0.095</td>\n",
       "      <td>0.128</td>\n",
       "      <td>0.032</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.010</th>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>29.000</td>\n",
       "      <td>3.680</td>\n",
       "      <td>2.730</td>\n",
       "      <td>0.320</td>\n",
       "      <td>3.570</td>\n",
       "      <td>2.400</td>\n",
       "      <td>0.890</td>\n",
       "      <td>0.095</td>\n",
       "      <td>0.128</td>\n",
       "      <td>0.032</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.100</th>\n",
       "      <td>78.000</td>\n",
       "      <td>99.000</td>\n",
       "      <td>100.000</td>\n",
       "      <td>0.180</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.060</td>\n",
       "      <td>0.010</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.095</td>\n",
       "      <td>0.128</td>\n",
       "      <td>0.032</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"3\" valign=\"top\">10000</th>\n",
       "      <th>0.001</th>\n",
       "      <td>1.000</td>\n",
       "      <td>3.000</td>\n",
       "      <td>85.000</td>\n",
       "      <td>1.330</td>\n",
       "      <td>1.060</td>\n",
       "      <td>0.000</td>\n",
       "      <td>2.540</td>\n",
       "      <td>1.880</td>\n",
       "      <td>0.150</td>\n",
       "      <td>0.034</td>\n",
       "      <td>0.041</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.010</th>\n",
       "      <td>22.000</td>\n",
       "      <td>24.000</td>\n",
       "      <td>85.000</td>\n",
       "      <td>0.630</td>\n",
       "      <td>0.770</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.870</td>\n",
       "      <td>0.570</td>\n",
       "      <td>0.150</td>\n",
       "      <td>0.034</td>\n",
       "      <td>0.041</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.100</th>\n",
       "      <td>100.000</td>\n",
       "      <td>100.000</td>\n",
       "      <td>100.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.034</td>\n",
       "      <td>0.041</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"3\" valign=\"top\">100000</th>\n",
       "      <th>0.001</th>\n",
       "      <td>17.000</td>\n",
       "      <td>55.000</td>\n",
       "      <td>100.000</td>\n",
       "      <td>0.240</td>\n",
       "      <td>0.060</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.100</td>\n",
       "      <td>0.440</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.012</td>\n",
       "      <td>0.002</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.010</th>\n",
       "      <td>100.000</td>\n",
       "      <td>99.000</td>\n",
       "      <td>100.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.010</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.012</td>\n",
       "      <td>0.002</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.100</th>\n",
       "      <td>100.000</td>\n",
       "      <td>100.000</td>\n",
       "      <td>100.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.012</td>\n",
       "      <td>0.002</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               SR 45   SR 90  SR 135  NF1 45  NF1 90  NF1 135  NF2 45  NF2 90  \\\n",
       "100    0.001   0.000   0.000   0.000  12.440   7.610    1.830   9.260   7.070   \n",
       "       0.010   0.000   0.000   0.000  11.520   6.870    1.830   7.440   6.080   \n",
       "       0.100   1.000   7.000  27.000   4.220   1.210    0.630   1.270   0.980   \n",
       "1000   0.001   0.000   0.000  29.000   4.450   3.330    0.320   5.780   3.720   \n",
       "       0.010   0.000   0.000  29.000   3.680   2.730    0.320   3.570   2.400   \n",
       "       0.100  78.000  99.000 100.000   0.180   0.000    0.000   0.060   0.010   \n",
       "10000  0.001   1.000   3.000  85.000   1.330   1.060    0.000   2.540   1.880   \n",
       "       0.010  22.000  24.000  85.000   0.630   0.770    0.000   0.870   0.570   \n",
       "       0.100 100.000 100.000 100.000   0.000   0.000    0.000   0.000   0.000   \n",
       "100000 0.001  17.000  55.000 100.000   0.240   0.060    0.000   1.100   0.440   \n",
       "       0.010 100.000  99.000 100.000   0.000   0.000    0.000   0.000   0.010   \n",
       "       0.100 100.000 100.000 100.000   0.000   0.000    0.000   0.000   0.000   \n",
       "\n",
       "              NF2 135  PM 45  PM 90  PM 135  \n",
       "100    0.001    2.520  0.248  0.293   0.183  \n",
       "       0.010    2.520  0.248  0.293   0.183  \n",
       "       0.100    0.830  0.248  0.293   0.183  \n",
       "1000   0.001    0.890  0.095  0.128   0.032  \n",
       "       0.010    0.890  0.095  0.128   0.032  \n",
       "       0.100    0.000  0.095  0.128   0.032  \n",
       "10000  0.001    0.150  0.034  0.041   0.000  \n",
       "       0.010    0.150  0.034  0.041   0.000  \n",
       "       0.100    0.000  0.034  0.041   0.000  \n",
       "100000 0.001    0.000  0.012  0.002   0.000  \n",
       "       0.010    0.000  0.012  0.002   0.000  \n",
       "       0.100    0.000  0.012  0.002   0.000  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0.0010</th>\n",
       "      <td>387994913</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.0100</th>\n",
       "      <td>3879950</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.1000</th>\n",
       "      <td>38800</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                0\n",
       "0.0010  387994913\n",
       "0.0100    3879950\n",
       "0.1000      38800"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot results\n",
    "\n",
    "index = [[num for num in eval_num for i in range(eps.shape[0])], list(eps) * eval_num.shape[0]]\n",
    "columns = ['SR 45', 'SR 90', 'SR 135', 'NF1 45', 'NF1 90', 'NF1 135', 'NF2 45', 'NF2 90', 'NF2 135']\n",
    "test_df = pd.DataFrame(np.random.rand(eps.shape[0]*eval_num.shape[0], len(columns)), index, columns)\n",
    "\n",
    "test_df['SR 45'] = success_rate_45.flatten()*100\n",
    "test_df['SR 90'] = success_rate_90.flatten()*100\n",
    "test_df['SR 135'] = success_rate_135.flatten()*100\n",
    "\n",
    "test_df['NF1 45'] = np.average(fail1_45_cnt, axis=0).flatten()\n",
    "test_df['NF1 90'] = np.average(fail1_90_cnt, axis=0).flatten()\n",
    "test_df['NF1 135'] = np.average(fail1_135_cnt, axis=0).flatten()\n",
    "\n",
    "test_df['NF2 45'] = np.average(fail2_45_cnt, axis=0).flatten()\n",
    "test_df['NF2 90'] = np.average(fail2_90_cnt, axis=0).flatten()\n",
    "test_df['NF2 135'] = np.average(fail2_135_cnt, axis=0).flatten()\n",
    "\n",
    "test_df['PM 45'] = [num for num in np.average(p_optmiss_45_cnt, axis=0)/p_opt_45.shape[0] for i in range(eps.shape[0])]\n",
    "test_df['PM 90'] = [num for num in np.average(p_optmiss_90_cnt, axis=0)/p_opt_90.shape[0] for i in range(eps.shape[0])]\n",
    "test_df['PM 135'] = [num for num in np.average(p_optmiss_135_cnt, axis=0)/p_opt_135.shape[0] for i in range(eps.shape[0])]\n",
    "\n",
    "pd.options.display.float_format = '{:.3f}'.format\n",
    "display(test_df)\n",
    "\n",
    "pd.options.display.float_format = '{:.4f}'.format\n",
    "sample_df = pd.DataFrame(l.astype(int), index = list(eps))\n",
    "display(sample_df)\n",
    "\n",
    "# SR theta: (in %) Success rate for C_theta\n",
    "# NF1 theta: Average number of returned designs that violate success condition 1\n",
    "# NF2 theta: Average number of returned designs that violate success condition 2\n",
    "# PM theta: Average percentage of points in P^* that are not in P"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "np.savez('results_final_r100_epsdep.npz', \n",
    "         fail1_45_cnt = fail1_45_cnt, \n",
    "         fail1_90_cnt = fail1_90_cnt, \n",
    "         fail1_135_cnt = fail1_135_cnt, \n",
    "         fail2_45_cnt = fail2_45_cnt, \n",
    "         fail2_90_cnt = fail2_90_cnt,\n",
    "         fail2_135_cnt = fail2_135_cnt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\\begin{table}\n",
      "\\centering\n",
      "\\label{tbl:theoretical_l}\n",
      "\\begin{tabular}{lr}\n",
      "\\toprule\n",
      "{} &          0 \\\\\n",
      "\\midrule\n",
      "0.0010 &  387994913 \\\\\n",
      "0.0100 &    3879950 \\\\\n",
      "0.1000 &      38800 \\\\\n",
      "\\bottomrule\n",
      "\\end{tabular}\n",
      "\\end{table}\n",
      "\n",
      "\\begin{table}\n",
      "\\centering\n",
      "\\label{tbl:gapsofsuboptimals}\n",
      "\\begin{tabular}{lrrrrr}\n",
      "\\toprule\n",
      "{} &    mu\\_1 &    mu\\_2 &  Delta\\_45 &  Delta\\_90 &  Delta\\_135 \\\\\n",
      "\\midrule\n",
      "count & 206.000 & 206.000 &   153.000 &   180.000 &    196.000 \\\\\n",
      "mean  & -12.137 &   9.424 &     0.666 &     0.906 &      1.343 \\\\\n",
      "std   &   2.066 &   2.156 &     0.520 &     0.711 &      0.869 \\\\\n",
      "min   & -16.249 &   2.858 &     0.001 &     0.004 &      0.018 \\\\\n",
      "max   &  -7.087 &  14.717 &     2.576 &     3.544 &      4.726 \\\\\n",
      "\\bottomrule\n",
      "\\end{tabular}\n",
      "\\end{table}\n",
      "\n",
      "\\begin{table}\n",
      "\\centering\n",
      "\\label{tbl:ressults}\n",
      "\\begin{tabular}{llrrr}\n",
      "\\toprule\n",
      "       &        &  SR 45 &  SR 90 &  SR 135 \\\\\n",
      "\\midrule\n",
      "\\multirow{3}{*}{100} & 0.0010 &   0.00 &   0.00 &    0.00 \\\\\n",
      "       & 0.0100 &   0.00 &   0.00 &    0.00 \\\\\n",
      "       & 0.1000 &   1.00 &   7.00 &   27.00 \\\\\n",
      "\\cline{1-5}\n",
      "\\multirow{3}{*}{1000} & 0.0010 &   0.00 &   0.00 &   29.00 \\\\\n",
      "       & 0.0100 &   0.00 &   0.00 &   29.00 \\\\\n",
      "       & 0.1000 &  78.00 &  99.00 &  100.00 \\\\\n",
      "\\cline{1-5}\n",
      "\\multirow{3}{*}{10000} & 0.0010 &   1.00 &   3.00 &   85.00 \\\\\n",
      "       & 0.0100 &  22.00 &  24.00 &   85.00 \\\\\n",
      "       & 0.1000 & 100.00 & 100.00 &  100.00 \\\\\n",
      "\\cline{1-5}\n",
      "\\multirow{3}{*}{100000} & 0.0010 &  17.00 &  55.00 &  100.00 \\\\\n",
      "       & 0.0100 & 100.00 &  99.00 &  100.00 \\\\\n",
      "       & 0.1000 & 100.00 & 100.00 &  100.00 \\\\\n",
      "\\bottomrule\n",
      "\\end{tabular}\n",
      "\\end{table}\n",
      "\n",
      "\\begin{table}\n",
      "\\centering\n",
      "\\label{tbl:ressults}\n",
      "\\begin{tabular}{llrrrrrrrrrrrr}\n",
      "\\toprule\n",
      "       &        &  SR 45 &  SR 90 &  SR 135 &  NF1 45 &  NF1 90 &  NF1 135 &  NF2 45 &  NF2 90 &  NF2 135 &  PM 45 &  PM 90 &  PM 135 \\\\\n",
      "\\midrule\n",
      "\\multirow{3}{*}{100} & 0.0010 &   0.00 &   0.00 &    0.00 &   12.44 &    7.61 &     1.83 &    9.26 &    7.07 &     2.52 &   0.25 &   0.29 &    0.18 \\\\\n",
      "       & 0.0100 &   0.00 &   0.00 &    0.00 &   11.52 &    6.87 &     1.83 &    7.44 &    6.08 &     2.52 &   0.25 &   0.29 &    0.18 \\\\\n",
      "       & 0.1000 &   1.00 &   7.00 &   27.00 &    4.22 &    1.21 &     0.63 &    1.27 &    0.98 &     0.83 &   0.25 &   0.29 &    0.18 \\\\\n",
      "\\cline{1-14}\n",
      "\\multirow{3}{*}{1000} & 0.0010 &   0.00 &   0.00 &   29.00 &    4.45 &    3.33 &     0.32 &    5.78 &    3.72 &     0.89 &   0.10 &   0.13 &    0.03 \\\\\n",
      "       & 0.0100 &   0.00 &   0.00 &   29.00 &    3.68 &    2.73 &     0.32 &    3.57 &    2.40 &     0.89 &   0.10 &   0.13 &    0.03 \\\\\n",
      "       & 0.1000 &  78.00 &  99.00 &  100.00 &    0.18 &    0.00 &     0.00 &    0.06 &    0.01 &     0.00 &   0.10 &   0.13 &    0.03 \\\\\n",
      "\\cline{1-14}\n",
      "\\multirow{3}{*}{10000} & 0.0010 &   1.00 &   3.00 &   85.00 &    1.33 &    1.06 &     0.00 &    2.54 &    1.88 &     0.15 &   0.03 &   0.04 &    0.00 \\\\\n",
      "       & 0.0100 &  22.00 &  24.00 &   85.00 &    0.63 &    0.77 &     0.00 &    0.87 &    0.57 &     0.15 &   0.03 &   0.04 &    0.00 \\\\\n",
      "       & 0.1000 & 100.00 & 100.00 &  100.00 &    0.00 &    0.00 &     0.00 &    0.00 &    0.00 &     0.00 &   0.03 &   0.04 &    0.00 \\\\\n",
      "\\cline{1-14}\n",
      "\\multirow{3}{*}{100000} & 0.0010 &  17.00 &  55.00 &  100.00 &    0.24 &    0.06 &     0.00 &    1.10 &    0.44 &     0.00 &   0.01 &   0.00 &    0.00 \\\\\n",
      "       & 0.0100 & 100.00 &  99.00 &  100.00 &    0.00 &    0.00 &     0.00 &    0.00 &    0.01 &     0.00 &   0.01 &   0.00 &    0.00 \\\\\n",
      "       & 0.1000 & 100.00 & 100.00 &  100.00 &    0.00 &    0.00 &     0.00 &    0.00 &    0.00 &     0.00 &   0.01 &   0.00 &    0.00 \\\\\n",
      "\\bottomrule\n",
      "\\end{tabular}\n",
      "\\end{table}\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Results in Latex tables\n",
    "print(sample_df.to_latex(float_format=\"%.3f\", label = \"tbl:theoretical_l\"))\n",
    "\n",
    "mu_table = mu_describe.mask(mu_describe == 0).describe().iloc[[0,1,2,3,7],:]\n",
    "print(mu_table.to_latex(float_format=\"%.3f\", label = \"tbl:gapsofsuboptimals\"))\n",
    "\n",
    "\n",
    "print(test_df[[\"SR 45\", \"SR 90\", \"SR 135\"]].to_latex(float_format=\"%.2f\", label = \"tbl:ressults\", multirow = True))\n",
    "\n",
    "print(test_df.to_latex(float_format=\"%.2f\", label = \"tbl:ressults\", multirow = True))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "VectorOpt",
   "language": "python",
   "name": "vectoropt"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
